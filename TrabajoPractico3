Nombre: Mosainer Mart√≠n
Trabajo Pr√°ctico 3: AyDA

Ejercicio 1:
Respuesta:
Para analizar la cantidad de llamadas realizadas por ùêπ(ùëõ),
el algoritmo recursivo que calcula n!,
 primero debemos definir el algoritmo:

c√≥digo en python:
def F(n):
    if n == 0:
        return 1
    else:
        return n * F(n - 1)

Este algoritmo calcula el factorial de 
ùëõ
n de manera recursiva. Observemos que:

Para 
ùëõ
=
0
n=0, se realiza una sola llamada a la funci√≥n y la ejecuci√≥n termina, ya que 
ùêπ(0)=1
Para cualquier ùëõ>0, la funci√≥n ùêπ(ùëõ) llama a ùêπ(ùëõ‚àí1), y as√≠ sucesivamente, hasta que alcanza el caso base 
ùêπ(0).


Definici√≥n de la relaci√≥n de recurrencia para el n√∫mero de llamadas:
Sea 
ùëá
(
ùëõ
)
T(n) el n√∫mero total de llamadas a la funci√≥n F cuando calculamos 
ùêπ(ùëõ) Si n=0, solo se realiza una llamada (caso base): T(0)=1

Si n>0, la funci√≥n F(n) realiza una llamada a F(n‚àí1), m√°s la llamada actual, por lo que: 
T(n)=T(n‚àí1)+1

Resolver la relaci√≥n de recurrencia

Tenemos la relaci√≥n de recurrencia: T(n)=T(n‚àí1)+1
con la condici√≥n inicial: T(0)=1.

Para resolver esta relaci√≥n, expandimos los t√©rminos sucesivos de la recurrencia:
Entonces:

T(n)=T(n‚àí1)+1

=(T(n‚àí2)+1)+1=T(n‚àí2)+2

=T(n‚àí3)+3
.
.
.
=T(0)+n

Sustituyendo T(0)=1, obtenemos:

     T(n)=1+n
    

     Soluci√≥n final
Por lo tanto, el n√∫mero de llamadas realizadas por 
F(n) es: T(n)=n+1